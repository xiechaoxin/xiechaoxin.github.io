<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>design_patterns - 分类 - xcx</title>
        <link>https://xiechaoxin.github.io/categories/design_patterns/</link>
        <description>design_patterns - 分类 - xcx</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xiechaoxin.github.io/categories/design_patterns/" rel="self" type="application/rss+xml" /><item>
    <title>GOF设计模式总结</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[GOF 设计模式 1 从面向对象谈起 1.1 底层思维：向下，如何把握机器底层，从微观理解对象构造 语言构造 编译转换 内存模型 运行时机制 1.2 抽象思维：向上如何将我们]]></description>
</item>
<item>
    <title>单一职责_Bridge</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3_bridge/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3_bridge/</guid>
    <description><![CDATA[组件协作模式 在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键]]></description>
</item>
<item>
    <title>单一职责_Decorator</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3_decorator/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3_decorator/</guid>
    <description><![CDATA[组件协作模式 在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键]]></description>
</item>
<item>
    <title>对象创建_AbstractFactory</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_abstractfactory/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_abstractfactory/</guid>
    <description><![CDATA[对象创建模式 通过“对象创建”模式绕开 new，来避免对象创建(new)过程中所导致的紧耦合 (依赖具体类)，从而支持对象创建的稳定。它是接口抽象]]></description>
</item>
<item>
    <title>对象创建_Builder</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_builder/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_builder/</guid>
    <description><![CDATA[对象创建模式 通过“对象创建”模式绕开 new，来避免对象创建(new)过程中所导致的紧耦合 (依赖具体类)，从而支持对象创建的稳定。它是接口抽象]]></description>
</item>
<item>
    <title>对象创建_FactoryMethod</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_factorymethod/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_factorymethod/</guid>
    <description><![CDATA[对象创建模式 通过“对象创建”模式绕开 new，来避免对象创建(new)过程中所导致的紧耦合 (依赖具体类)，从而支持对象创建的稳定。它是接口抽象]]></description>
</item>
<item>
    <title>对象创建_Prototype</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_prototype/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA_prototype/</guid>
    <description><![CDATA[对象创建模式 通过“对象创建”模式绕开 new，来避免对象创建(new)过程中所导致的紧耦合 (依赖具体类)，从而支持对象创建的稳定。它是接口抽象]]></description>
</item>
<item>
    <title>对象性能_Flyweight</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD_flyweight/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD_flyweight/</guid>
    <description><![CDATA[对象性能 面向对象很好地解决了“抽象”的问题，但是必不可免地要付出一定的代价。对于通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，]]></description>
</item>
<item>
    <title>对象性能_Singleton</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD_singleton/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E6%80%A7%E8%83%BD_singleton/</guid>
    <description><![CDATA[对象性能 面向对象很好地解决了“抽象”的问题，但是必不可免地要付出一定的代价。对于通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，]]></description>
</item>
<item>
    <title>接口隔离_Adapter</title>
    <link>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB_adapter/</link>
    <pubDate>Sat, 15 Jul 2023 00:00:00 &#43;0000</pubDate><guid>https://xiechaoxin.github.io/posts/design-patterns/gof%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB_adapter/</guid>
    <description><![CDATA[接口隔离 在组件构建过程中，某些接口之间直接的依颖常常会带来很多问题、甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的]]></description>
</item>
</channel>
</rss>
